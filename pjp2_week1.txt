                                                             ASSIGNMENT-1
//refer to branches(implemented)

mkdir git_pjp_week1
cd git_pjp_week1
git init

gedit sample1.txt  //creating file
git add .
git commit -m "created sample file"
git remote add origin https://github.com/SahithiReddyM/Sapient.git
git push -u origin master

git branch feature
git branch dev
git branch QA
git branch delivery

mkdir feature1
cd feature1
gedit sample-feature1.txt
git status
cd ..
git add feature/*
git commit -m "feature 1 folder with sample-feature1 text file"
git push origin master:feature

REMOVING FILES:
git rm --cached sample1.txt//file still exists in working directory but is untracked
git rm -f sample1.txt//to remove from working directory
git push origin master

REMOVING FILES:
git rm -r feature1 //remove feature folder
git commit -m "folder deleted"
git push origin feature1

Checkout from remote to local:
git checkout feature
git pull origin feature

Difference between pull and checkout
Pull: 'git pull' contacts the remote repository identified by origin and looks for updates. It fetches any updates and then merges the changes into the target  branch.
Checkout: 'git checkout -b <branch> origin/<branch>' creates a new branch based on origin/<branch> , and does not contact the remote repository.

===========
if there are changes in same file in both feature and dev branch
if a pull request is made for feature from dev branch there will be a merge conflict, this has to be resolves manually
from dev branch> git pull origin dev
                 git merge feature
                 //resolve conflict and save 
                 git push origin dev

//screenshots of pull request example in github provided(promoting code and handling merge conflicts)
If change is not in the same files then automatic merging will take place.
============
>git checkout master
 git merge feature
 git merge dev
 git merge QA
 git merge delivery

========================================================================================================================
git revert as a tool for undoing committed changes, while git reset HEAD is for undoing uncommitted changes

git reset --soft : Tells Git to reset HEAD to another commit, so index and the working directory will not be altered in any way. All of the files changed between the original HEAD and the commit will be staged.

git reset --hard [HEAD] : This resets everything - it resets HEAD back to another commit, resets the index to match it, and resets the working directory to match it as well.

=========================
>git stash pop

//resolve conflict(s)

>git reset

>git stash drop
=========================
Rebasing a branch updates one branch with another by applying the commits of one branch on top of the commits of another branch
git rebase branch2 branch1
pick = use commit
reword = use commit, but edit the commit message
edit = use commit, but stop for amending
squash = use commit, but meld into previous commit
fixup = like "squash", but discard this commit's log message
exec = run command (the rest of the line) using shell
drop = remove commit

=========================
$ git log : Git log is a utility tool to review and read a history of everything that happens to a repository. Multiple options can be used with a git log to make history more specific.

$ git status : Used to display the state of the repository and staging area. It allows us to see the tracked, untracked files and changes. This command will not show any commit records or information

$ git reflog : Reflog is a mechanism to record when the tip of branches are updated. This command is to manage the information recorded in it.


